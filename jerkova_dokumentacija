Ovakva je situacija. 
Kada postavljamo vrijednost neke varijable to radimo s inicijalizatorom i on sadrži izraz pridruživanja,
i sad u izrazu pridruživanja kažemo postfiks izraz da ne stavi svoju vrijednost na stog a drugi izraz pridruživanja 
će stavit svoju vrijednost na stog (odnosno neki njegov potomak). i sad mi samo moramo u izrazu pridruživanja 
onome na što se referencira postfiks postaviti tu vrijednost. Ja sam to kao napravio al bugoci su mogući.

Što se tiče postfiks izraza, ako nije s lijeve strane jednakosti (a to znamo jer ako je s lijeve strane izraz pridruživanja
će nam to javiti) i tipa je varijabla ili element niza, učitava svoju vrijednost i stavlja ju na stog.

Ako je tipa funkcija, onda se poziva funkcija i stavlja se povratna vrijednost na stog.

Za inkrement i dekrement cemo jos vidjeti sto i kako.

Za unarni treba definirati OP_INC i OP_DEC te unarni operator (tu treba samo pomnoziti s -1 ako je minus 
i vidit sta je op tilda, op neg je izi).

CAST IZRAZ --> ne radimo nista boli nas kita.

Za multiplikativni izraz moramo samo pozvati funkcije, napisano u todo-u.

Za aditivni izraz ako ima 3 djece izvedemo djecu koja svoje vrijednosti zapisu na stog i samo ih skinemo obavimo operaciju 
i vratimo rezultat na stog.

Odnosni izraz bi sve trebalo biti riješeno.

Jednakosni izraz bi se isto usudio reci da je vse rijeseno.

Ovi binarni izrazi su jednostavni ko pekmez.

Logički i i ili ni isto trebali fercerati.

TODO1: RIJEŠITI PETLJE
TODO2: RIJEŠITI INC DEC
TODO3: RIJEŠITI NIZOVE -> TREBA SVUGDJE BITI PRVI ELEMENT NA NAJMANJOJ A ZADNJI NA NAJVEĆOJ ADRESI!!!
TODO4: RIJEŠITI POINTERE :((

NA DNU STOGA CE MI BITI PRVI ELEMENT NIZA A NA VRHU STOGA CE MI BITI ZADNJI ELEMENT NIZA

TEMPLATE ZA INIT_DEKLARATOR:

dakle prije nego šro pozovem izvedi svojstva za inicijalizator, treba vidjeti radi li se o nizu.

Ako da treba rezervirati odgovarajuću količinu memorije na stogu, to je najbolje napraviti u 
izravnom deklaratoru s inicijalizacijom.

I sad kad se izvede sve ovo, treba sve poskidat sa stoga(to radimo u init_deklaratoru) i spremit na odgovarajuću 
lokaciju na stogu(koju smo rezervirali prije).

dakle drugim rijecima treba dodati nesto u stilu:

a = dohvati_adresu_niza()
for i in range(duljina):
    PK.upisi("    POP R1")
    PK.upisi("    STORE R1, (R0-, " + str(format( str(-(a + i)) , )) + ")")


Sto se pointera tice treba u postfiks izrazu kada dohvacamo vrijednost provjeriti radi li se o pointeru i ako 
da treba napisati asembler za adresiranje pointera.

Također treba napisati asembler za adresiranje pointera u izrazu pridruživanja.
